// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	// List returns records that match Selector
	List(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*Records, error)
	// Delete deletes records that match Selector
	Delete(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*DeleteRecordsResponse, error)
	// Upsert inserts (if no ID is provided) or updates records
	// you may omit the Connection data to just manipulate tags
	Upsert(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	// GetTags returns all tags. Note that tags are case sensitive
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// Export dumps config into serialized format
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ConfigData, error)
	// Import imports previously serialized records
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) List(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Delete(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*DeleteRecordsResponse, error) {
	out := new(DeleteRecordsResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Upsert(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ConfigData, error) {
	out := new(ConfigData)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Config/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations should embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	// List returns records that match Selector
	List(context.Context, *Selector) (*Records, error)
	// Delete deletes records that match Selector
	Delete(context.Context, *Selector) (*DeleteRecordsResponse, error)
	// Upsert inserts (if no ID is provided) or updates records
	// you may omit the Connection data to just manipulate tags
	Upsert(context.Context, *Record) (*Record, error)
	// GetTags returns all tags. Note that tags are case sensitive
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// Export dumps config into serialized format
	Export(context.Context, *ExportRequest) (*ConfigData, error)
	// Import imports previously serialized records
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
}

// UnimplementedConfigServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) List(context.Context, *Selector) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConfigServer) Delete(context.Context, *Selector) (*DeleteRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigServer) Upsert(context.Context, *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedConfigServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedConfigServer) Export(context.Context, *ExportRequest) (*ConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedConfigServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).List(ctx, req.(*Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Delete(ctx, req.(*Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Upsert(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Config/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.cli.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Config_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Config_Delete_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Config_Upsert_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Config_GetTags_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _Config_Export_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _Config_Import_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// ListenerClient is the client API for Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerClient interface {
	// Update alters connection status.
	Update(ctx context.Context, in *ListenerUpdateRequest, opts ...grpc.CallOption) (*ListenerStatusResponse, error)
	// GetStatus returns current listener status for active tunnels
	GetStatus(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*ListenerStatusResponse, error)
	// StatusUpdates opens a stream to listen to connection status updates
	// a client has to subscribe and continuously
	// listen to the broadcasted updates
	StatusUpdates(ctx context.Context, in *StatusUpdatesRequest, opts ...grpc.CallOption) (*ListenerStatusResponse, error)
}

type listenerClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerClient(cc grpc.ClientConnInterface) ListenerClient {
	return &listenerClient{cc}
}

func (c *listenerClient) Update(ctx context.Context, in *ListenerUpdateRequest, opts ...grpc.CallOption) (*ListenerStatusResponse, error) {
	out := new(ListenerStatusResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Listener/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) GetStatus(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*ListenerStatusResponse, error) {
	out := new(ListenerStatusResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Listener/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) StatusUpdates(ctx context.Context, in *StatusUpdatesRequest, opts ...grpc.CallOption) (*ListenerStatusResponse, error) {
	out := new(ListenerStatusResponse)
	err := c.cc.Invoke(ctx, "/pomerium.cli.Listener/StatusUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServer is the server API for Listener service.
// All implementations should embed UnimplementedListenerServer
// for forward compatibility
type ListenerServer interface {
	// Update alters connection status.
	Update(context.Context, *ListenerUpdateRequest) (*ListenerStatusResponse, error)
	// GetStatus returns current listener status for active tunnels
	GetStatus(context.Context, *Selector) (*ListenerStatusResponse, error)
	// StatusUpdates opens a stream to listen to connection status updates
	// a client has to subscribe and continuously
	// listen to the broadcasted updates
	StatusUpdates(context.Context, *StatusUpdatesRequest) (*ListenerStatusResponse, error)
}

// UnimplementedListenerServer should be embedded to have forward compatible implementations.
type UnimplementedListenerServer struct {
}

func (UnimplementedListenerServer) Update(context.Context, *ListenerUpdateRequest) (*ListenerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedListenerServer) GetStatus(context.Context, *Selector) (*ListenerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedListenerServer) StatusUpdates(context.Context, *StatusUpdatesRequest) (*ListenerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusUpdates not implemented")
}

// UnsafeListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerServer will
// result in compilation errors.
type UnsafeListenerServer interface {
	mustEmbedUnimplementedListenerServer()
}

func RegisterListenerServer(s grpc.ServiceRegistrar, srv ListenerServer) {
	s.RegisterService(&Listener_ServiceDesc, srv)
}

func _Listener_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Listener/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Update(ctx, req.(*ListenerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Listener/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).GetStatus(ctx, req.(*Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_StatusUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).StatusUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.cli.Listener/StatusUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).StatusUpdates(ctx, req.(*StatusUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Listener_ServiceDesc is the grpc.ServiceDesc for Listener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Listener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.cli.Listener",
	HandlerType: (*ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Listener_Update_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Listener_GetStatus_Handler,
		},
		{
			MethodName: "StatusUpdates",
			Handler:    _Listener_StatusUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
